#! /usr/bin/env python3
# Copyright (C) 2021 Richard Purdie
# Copyright (c) 2024, Konrad Weihmann
# SPDX-License-Identifier: GPL-2.0-only

# Based on bitbake-getvar
# Lists all defined bitbake variables

import argparse
import logging
import os
import sys
from typing import Iterable
import warnings

logging.basicConfig(stream=sys.stderr, level=logging.INFO)


def filter_classes(paths: Iterable[str]):
    return any('/classes/' in x or
               '/classes-recipe/' in x or
               '/classes-global/' in x for x in paths)


def filter_conf(paths: Iterable[str]):
    return any('/conf/' in x for x in paths)

def filter_lib(paths: Iterable[str]):
    return any('/lib/' in x for x in paths)

def filter_recipe(paths: Iterable[str]):
    return not filter_conf(paths) and not filter_classes(paths)


def main(args=None):
    parser = argparse.ArgumentParser(description="Bitbake List Vars")
    parser.add_argument('--layer_path_filter', nargs='*', action='extend', default=[], help='Limit layer scanning')
    parser.add_argument(
        '-q', '--quiet', help='Silence bitbake server logging', action="store_true")
    parser.add_argument(
        '-a', '--all', help='Parse all available recipes as well', action="store_true")
    parser.add_argument(
        '-p', '--path', help='List the path(s) that define the variable', action="store_true")
    parser.add_argument(
        '--filter', choices=['classes', 'conf', 'recipe', 'lib'], nargs='*', default=[], action='extend', help='Filter functions')
    parser.add_argument('bitbake', help='Path to bitbake binary')
    args = parser.parse_args()

    bindir = os.path.dirname(args.bitbake)
    topdir = os.path.dirname(bindir)
    sys.path.insert(0, os.path.join(topdir, 'lib'))
    sys.path.insert(1, os.path.join(topdir, '..', 'meta', 'lib'))

    logging.info(f'Extracting info variables. Filter: {args.layer_path_filter}')

    import bb.tinfoil

    def yield_from_data(d, name):
        filepath = os.path.abspath(d.get('FILE', '/does/not/exist'))
        if any(filepath.startswith(x) for x in args.layer_path_filter) or not args.layer_path_filter:
            logging.info(f'Extracting data from {name}')
            for k in sorted(d.keys()):
                if ':' in k:
                    continue
                if k.upper() != k:
                    continue
                if k.startswith('_'):
                    continue
                _paths = {x['file'] for x in d.varhistory.variable(k)}
                if args.filter:
                    if (('classes' in args.filter and not filter_classes(_paths)) or 'classes' not in args.filter) and \
                       (('conf' in args.filter and not filter_conf(_paths)) or 'conf' not in args.filter) and \
                       (('recipe' in args.filter and not filter_recipe(_paths)) or 'recipe' not in args.filter) and \
                       (('lib' in args.filter and not filter_lib(_paths)) or 'lib' not in args.filter):
                        continue
                if args.path:
                    yield (k, tuple(sorted(_paths)))
                else:
                    yield k

    quiet = args.quiet
    with bb.tinfoil.Tinfoil(tracking=True, setup_logging=not quiet) as tinfoil:
        tinfoil.prepare(quiet=2, config_only=True)
        logging.info('Extracting data from global config')
        yield from yield_from_data(tinfoil.config_data, 'global')

    if args.all:
        with bb.tinfoil.Tinfoil(tracking=True, setup_logging=True) as tinfoil:
            tinfoil.prepare(quiet=2)
            for item in tinfoil.all_recipes():
                try:
                    yield from yield_from_data(tinfoil.parse_recipe(str(item)), str(item))
                except ModuleNotFoundError as e:
                    logging.error(f'Parsing issues at {item}')
                    logging.exception(e)
                    continue


if __name__ == "__main__":
    warnings.simplefilter("default")
    result = main()
    for item in sorted(set(result)):
        if isinstance(item, tuple):
            print(f'{item[0]}:{",".join(item[1])}')
        else:
            print(item)
