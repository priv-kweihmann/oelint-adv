#! /usr/bin/env python3
# Copyright (c) 2024, Konrad Weihmann
# SPDX-License-Identifier: BSD-2-Clause

import argparse
import json
import os
import re
import subprocess
import sys

basepath = os.path.abspath(os.path.dirname(__file__))
sys.path.append(os.path.abspath(basepath + '/../'))


def create_argparser() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument('--layer_filter', nargs='*', action='extend', help='Limit layer scanning')
    parser.add_argument('poky_location', help='Location of poky repository')
    parser.add_argument('build_dir', help='Location of build directory')
    parser.add_argument('destination')
    return parser.parse_args()


args = create_argparser()

_poky_source = f'source {args.poky_location}/oe-init-build-env {args.build_dir} > /dev/null 2>&1'

output_layers = subprocess.check_output(
    f'{_poky_source} && bitbake-layers show-layers',
    shell=True,
    universal_newlines=True,
    executable='/bin/bash',
    cwd=args.build_dir
)

layer_dirs = []
for m in re.finditer(r'^(?P<name>.*)\s+(?P<path>/.*)\s+(\d+)', output_layers, re.MULTILINE):
    if not args.layer_filter or m.group('name').strip() in args.layer_filter:
        layer_dirs.append(os.path.abspath(m.group('path')))

if not layer_dirs:
    print(f'WARNING: no matching layer found: {args.layer_filter }: {output_layers}')

layer_path_filter = ' '.join([f'--layer_path_filter={x}' for x in layer_dirs])

output_known = subprocess.check_output(
    f'{_poky_source} && {basepath}/bitbake-listvars {layer_path_filter} --filter=classes --filter=conf --filter=lib -q -a $(which bitbake)',
    shell=True,
    universal_newlines=True,
    executable='/bin/bash',
    cwd=args.build_dir
)

output_renamed = subprocess.check_output(
    f'{_poky_source} && {basepath}/bitbake-listflags -v $(which bitbake) BB_RENAMED_VARIABLES',
    shell=True,
    universal_newlines=True,
    executable='/bin/bash',
    cwd=args.build_dir
)

output_machines = subprocess.check_output(
    f'{_poky_source} && {basepath}/oelint-bitbake-get-configs machine {" ".join(layer_dirs)}',
    shell=True,
    universal_newlines=True,
    executable='/bin/bash',
    cwd=args.build_dir
)

output_distro = subprocess.check_output(
    f'{_poky_source} && {basepath}/oelint-bitbake-get-configs distro {" ".join(layer_dirs)}',
    shell=True,
    universal_newlines=True,
    executable='/bin/bash',
    cwd=args.build_dir
)

output_known = output_known.split('\n')
# filter out those pesky server reconnect message
# and other warnings
output_known = [x for x in output_known if ':' not in x and x]

output_renamed = output_renamed.split('\n')
# filter out those pesky server reconnect message
# and other warnings
output_renamed = [x for x in output_renamed if ':' not in x and x]

obj = {
    'variables': {
        'known': output_known,
        'renamed': {},
    },
    'replacements': {
        'distros': [x for x in output_distro.split('\n') if ':' not in x and x],
        'machines': [x for x in output_machines.split('\n') if ':' not in x and x],
    },
}

for line in output_renamed:
    k, v = line.split('@', 1)
    obj['variables']['renamed'][k] = v

with open(args.destination, 'w') as o:
    json.dump(obj, o, indent=2)
