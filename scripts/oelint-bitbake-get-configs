#! /usr/bin/env python3
import argparse
import glob
import multiprocessing as mp
from functools import partial
from pathlib import Path
from typing import Iterable, List
import re

from oelint_parser.cls_item import Variable
from oelint_parser.cls_stash import Stash


def flatten(list_: Iterable) -> List:
    if not isinstance(list_, list):
        return [list_]
    flat = []
    for sublist in list_:
        flat.extend(flatten(sublist))
    return flat


def parse_conf(file: str, needles: List[str], defaults: List[str]) -> List[str]:
    if not Path(file).is_file():
        return []
    res = set(defaults)
    if file.endswith('.conf'):
        res.add(Path(file).stem)
    _stash = Stash(quiet=True)
    _stash.AddFile(file)
    _stash.Finalize()
    for needle in needles:
        _res = _stash.ExpandVar(file, attribute=Variable.ATTR_VAR, attributeValue=needle)
        res.update(x for x in ':'.join(_res.get(needle, '')).split(':') if x and not re.search(r'[\[\]!=$\']+', x))
    return list(res)


def main(args=None):
    parser = argparse.ArgumentParser(description="List bitbake configs")
    parser.add_argument('mode', choices=['distro', 'machine'], help='Mode')
    parser.add_argument('layers', nargs='+', help='layer path(s)')
    args = parser.parse_args()

    data_ = {
        'distro': {
            'needles': [
                'CLASSOVERRIDE',
                'LIBCOVERRIDE',
                'DISTROOVERRIDES',
            ],
            'defaults': [
                'class-cross',
                'class-cross-canadian',
                'class-devupstream',
                'class-native',
                'class-nativesdk',
                'class-target',
                'nodistro',
            ]
        },
        'machine': {
            'needles': [
                'AVAILTUNES',
                'MACHINEOVERRIDES',
            ],
            'defaults': []
        }
    }

    groups = set()
    result = set()
    for layer in args.layers:
        groups.update(glob.glob((Path(layer) / f'conf/{args.mode}/*.conf').as_posix()))
        groups.update(glob.glob((Path(layer) / f'conf/{args.mode}/include/*').as_posix()))
        groups.update(glob.glob((Path(layer) / f'conf/{args.mode}/include/*/*').as_posix()))
        groups.update(glob.glob((Path(layer) / f'conf/{args.mode}/include/*/*/*').as_posix()))

    if not groups:
        return []

    with mp.Pool(processes=min(mp.cpu_count(), len(groups))) as pool:
        try:
            result = set(flatten(pool.map(partial(parse_conf,
                                                  needles=data_.get(args.mode, {}).get('needles'),
                                                  defaults=data_.get(args.mode, {}).get('defaults'),
                                                  ), groups)))
        finally:
            pool.close()
            pool.join()
    return result


if __name__ == "__main__":
    result = main()
    for item in sorted(result):
        print(item)
