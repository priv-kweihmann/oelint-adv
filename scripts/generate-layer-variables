#! /usr/bin/env python3
# Copyright (c) 2024, Konrad Weihmann
# SPDX-License-Identifier: BSD-2-Clause

import argparse
import json
import os
import subprocess
import sys
import tempfile

basepath = os.path.abspath(os.path.dirname(__file__))
sys.path.append(os.path.abspath(basepath + '/../'))

from oelint_adv.data import known_variable_mod  # noqa: E402
from oelint_adv.tweaks import Tweaks  # noqa: E402


def create_argparser() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument('--layer_filter', nargs='*', action='extend', help='Limit layer scanning')
    parser.add_argument('--local', action='store_true', help='It is a local layer')
    parser.add_argument('poky_location', help='Location of poky repository')
    parser.add_argument('build_dir', help='Location of build directory')
    parser.add_argument('release', help='release name')
    parser.add_argument('destination')
    parser.add_argument('excludes', nargs='*', action='extend', help='Files to exclude')
    return parser.parse_args()


args = create_argparser()

_layer_filter = ' '.join([f'--layer_filter={x}' for x in args.layer_filter])

with tempfile.NamedTemporaryFile('r+') as t:
    subprocess.check_call(
        f'{basepath}/generate-variables {_layer_filter} {args.poky_location} {args.build_dir} {t.name}',
        shell=True,
        universal_newlines=True,
        executable='/bin/bash',
    )

    t.seek(0)

    cnt = json.load(t)
    excludes = []
    for item in args.excludes:
        if not os.path.isfile(item):
            if args.release == 'master':
                args.release = Tweaks.DEVELOPMENT_RELEASE
            item = known_variable_mod(args.release, item)
            if not item:
                continue
        with open(item) as i:
            excludes.append(json.load(i))

    def filter_response(a, b):
        if isinstance(a, dict):
            updated = {}
            for k, v in a.items():
                if isinstance(v, (list, dict)):
                    updated[k] = filter_response(v, b.get(k))
                else:
                    if k not in b:
                        updated[k] = v
            a = updated
        elif isinstance(a, list):
            a = [x for x in a if x not in b]
        return a

    for excl in excludes:
        cnt = filter_response(cnt, excl)

    if args.local:
        imports = []
        for item in args.excludes:
            if not os.path.isfile(item):
                imports.append(item)
            else:
                name, _ = os.path.splitext(os.path.basename(item))
                imports.append(name)
        cnt['$imports'] = sorted(imports)

    with open(args.destination, 'w') as o:
        json.dump(cnt, o, indent=2)
